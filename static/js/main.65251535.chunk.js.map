{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","hooks/useLocalStorageState.js","TodoApp.js","hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","toggle","value","setValue","e","target","EditTodoForm","id","task","editTodo","toggleEditForm","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","Todo","completed","removeTodo","toggleTodo","UseToggleState","isEditing","ListItem","key","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","todos","length","Paper","List","map","todo","i","Fragment","Divider","TodoForm","addTodo","padding","label","useLocalStorageState","defaultVal","val","JSON","parse","window","localStorage","getItem","String","useEffect","setItem","stringify","TodoApp","initialTodos","setTodos","newTodoText","uuidv4","todoId","updatedTodos","filter","newTask","useTodoState","backgroundColor","elevation","AppBar","color","position","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65251535.chunk.js","sourcesContent":["import {useState} from \"react\";\n\nfunction useToggle(initialVal = false) {\n    const [state, setState] = useState(initialVal);\n    const toggle = () => {\n        setState(!state)\n    }\n    return [state, toggle]\n}\n\nexport default useToggle","import { useState } from \"react\";\n\nexport default initialVal => {\n    const [value, setValue] = useState(initialVal);\n    // create function to handle changes\n    const handleChange = e => {\n        setValue(e.target.value)\n    }\n    // create function to reset\n    const reset = () => {\n        setValue(\"\")\n    }\n    // return\n    return [value, handleChange, reset]\n}","import React from 'react'\nimport useInputState from './hooks/useInputState'\n\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction EditTodoForm ( {id, task, editTodo, toggleEditForm}) {\n    const [value, handleChange, reset] = useInputState(task);\n    return (\n        <form\n            onSubmit={ e => {\n                e.preventDefault();\n                editTodo(id, value);\n                reset();\n                toggleEditForm();\n            }}\n            style={\n                {\n                    marginLeft: \"2rem\", \n                    width: \"78%\"\n                }}\n        >\n            <TextField \n                margin=\"normal\" \n                value={value} \n                onChange={handleChange} \n                fullWidth\n                autoFocus\n            />  \n        </form>\n        \n    )\n}\n\nexport default EditTodoForm","import React from 'react'\nimport UseToggleState from \"./hooks/useToggleState\"\nimport EditTodoForm from \"./EditTodoForm\"\n\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\"\n\nfunction Todo ({task, completed, removeTodo, id, toggleTodo, editTodo}) {\n    \n    const [isEditing, toggle] = UseToggleState(false)\n    \n    return (\n        <ListItem key={id} style={{height: \"64px\"}}>\n            { isEditing ? \n                <EditTodoForm \n                    editTodo={editTodo}\n                    id={id} \n                    task={task}\n                    toggleEditForm={toggle}\n                    /> : \n                <>\n                    <Checkbox tabIndex={-1} checked={completed} onClick={()=>toggleTodo(id)}/>\n                    <ListItemText style={\n                        {textDecoration: completed ? \"line-through\" : \"none\"}}>{task}</ListItemText>\n                    <ListItemSecondaryAction>\n                        <IconButton aria-label=\"Delete\" onClick={()=>removeTodo(id)}>\n                            <DeleteIcon />\n                        </IconButton>\n                        <IconButton aria-label=\"Edit\" onClick={toggle} >\n                            <EditIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </>\n            }\n        </ListItem>\n    )\n}\n\nexport default Todo","import React from 'react'\nimport Paper from \"@material-ui/core/Paper\"\nimport List from \"@material-ui/core/List\"\nimport Divider from \"@material-ui/core/Divider\"\nimport Todo from \"./Todo\"\n\nfunction TodoList({todos, removeTodo, toggleTodo, editTodo}) {\n    if (todos.length)    \n        return (\n            <Paper>\n                <List>\n                    {todos.map( (todo, i) => (\n                    <React.Fragment key={todo.id}>\n                        <Todo \n                            {...todo}\n                            toggleTodo={toggleTodo} \n                            removeTodo={removeTodo} \n                            key={todo.id}\n                            editTodo={editTodo}\n                            />\n                    { i < todos.length - 1 && <Divider /> }\n                    </React.Fragment>\n                ))}\n                </List>\n                \n            </Paper>\n                \n            \n        );\n    return null;\n}\n\nexport default TodoList\n","import React from 'react'\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\"\n\nimport useInputState from \"./hooks/useInputState\"\n\nfunction TodoForm( { addTodo }) {\n    const [ value, handleChange, reset ] = useInputState(\"\")\n    \n    return (\n        <Paper style={ {margin: \"1rem 0\", padding: \"0 1rem\"}}>\n            <form onSubmit={e => {\n                e.preventDefault();\n                addTodo(value);\n                reset();\n                }\n            }>\n                <TextField fullWidth value={value} onChange={handleChange} margin=\"normal\" label=\"Add New Todo\" />\n            </form>\n        </Paper>\n    )\n}\n\nexport default TodoForm;","import { useState, useEffect } from 'react'\n\nfunction useLocalStorageState (key, defaultVal) {\n    // make piece of state, based off of value in local storage or default\n    const [state, setState] = useState(() => {\n        let val;\n        try {\n            val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal))\n        }\n        catch (e) {\n            val = defaultVal\n        }\n        return val;\n    })\n    // use useEffect to update local storage when state changes\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify.state)\n    }, [state, key]);\n    \n    return [state, setState]\n}\n\nexport default useLocalStorageState","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\"\nimport ToolBar from \"@material-ui/core/Toolbar\"\nimport Grid from \"@material-ui/core/Grid\"\n\nimport TodoList from \"./TodoList\"\nimport TodoForm from \"./TodoForm\"\nimport useTodoState from \"./hooks/useTodoState\"\n\n\nfunction TodoApp() {\n    \n    const initialTodos = [ {id: 1, task: \"Walk the Dog\", completed: false}]\n    const { todos, addTodo, removeTodo, editTodo, toggleTodo} = useTodoState(initialTodos)\n    \n    \n    \n    return (  \n        <Paper \n            style={{\n                padding: 0,\n                margin: 0,\n                height: \"100vh\",\n                backgroundColor: \"#fafafa\"\n            }}\n            elevation={0}\n        >\n            <AppBar color='primary' position='static' style={{ height: \"64px\" }}>\n                <ToolBar>\n                    <Typography color='inherit'>TODOS WITH HOOKS</Typography>\n                </ToolBar>\n            </AppBar>\n            \n            <Grid container justify='center' style={ { marginTop: \"1rem\"}}>\n                <Grid  item xs={11} md={8} lg={4}>\n                    <TodoForm addTodo={addTodo} />\n                    <TodoList \n                        editTodo={editTodo} \n                        todos={todos} \n                        removeTodo={removeTodo} \n                        toggleTodo={toggleTodo}\n                        />  \n                </Grid>\n\n            </Grid>\n            \n        </Paper>\n    )\n}\n\nexport default TodoApp;\n\n// - TodoApp -this component will manage the state\n    // - TodoForm\n    // - TodoList\n    //     - TodoItem\n\n// each todo will have id, task, completed (true or false)","import useLocalStorageState from \"./useLocalStorageState\"\nimport uuidv4 from \"uuid/v4\";\n\nexport default initialTodos => {\n    const [todos, setTodos] = useLocalStorageState(\"todos\", initialTodos)\n    \n    return {\n        todos,\n        addTodo: newTodoText => {\n            setTodos([...todos, {id: uuidv4(), task: newTodoText, completed: false}])\n        },\n        removeTodo: todoId => {\n            // filter out removed todo\n            const updatedTodos = todos.filter(todo => todo.id !== todoId)\n            // call setTodos with new todos array\n            setTodos(updatedTodos)\n        },\n        toggleTodo: todoId => {\n            const updatedTodos = todos.map( todo => \n                todo.id === todoId ? {...todo, completed: ! todo.completed} : todo\n            )\n            setTodos(updatedTodos)\n        },\n        editTodo: (todoId, newTask) => {\n            const updatedTodos = todos.map( todo => \n                todo.id === todoId ? {...todo, task: newTask} : todo\n            )\n            setTodos(updatedTodos)\n        }\n    }\n}\n\n\n\n","import React from 'react';\nimport TodoApp from './TodoApp'\n\nfunction App() {\n  return (\n    <TodoApp /> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}